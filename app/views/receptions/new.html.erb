<div class="container mt-4">
  <h1>Nueva Recepción</h1>

  <%= form_with(model: @reception, local: true) do |f| %>
    <% if @reception.errors.any? %>
      <div class="alert alert-danger">
        <h2><%= pluralize(@reception.errors.count, "error") %> impidieron guardar esta recepción:</h2>
        <ul>
          <% @reception.errors.full_messages.each do |msg| %>
            <li><%= msg %></li>
          <% end %>
        </ul>
      </div>
    <% end %>

    <!-- CAMPO: Datos Globales de la Recepción -->
    <div class="row">
      <!-- Columna Izquierda: Datos generales -->
      <div class="col-md-6">
        <div class="mb-3">
          <%= f.label :fecha, class: "form-label" %>
          <%= f.date_field :fecha, class: "form-control", readonly: true, value: Date.today %>
        </div>
        <div class="mb-3">
          <%= f.label :hora, class: "form-label" %>
          <%= f.time_field :hora, class: "form-control", readonly: true, value: Time.current.strftime("%H:%M") %>
        </div>
        <!-- Selección del Proveedor (único) -->
    <div class="mb-3">
      <%= f.label :supplier_id, "Proveedor", class: "form-label" %>
      <%= f.select :supplier_id, 
                   options_from_collection_for_select(@suppliers, "id", "nombre", @reception.supplier_id), 
                   { include_blank: "Seleccione un proveedor" },
                   { class: "form-select" } %>
    </div>
        <div class="mb-3">
          <%= f.label :nro_guia_despacho, "Número de Guía de Despacho", class: "form-label" %>
          <%= f.text_field :nro_guia_despacho, class: "form-control" %>
        </div>
      </div>

      <!-- Columna Derecha: Datos cuantitativos y evaluador -->
      <div class="col-md-6">
        <div class="mb-3">
          <%= f.label :pallets, class: "form-label" %>
          <%= f.number_field :pallets, class: "form-control" %>
        </div>
        <div class="mb-3">
          <%= f.label :cajas, class: "form-label" %>
          <%= f.number_field :cajas, class: "form-control" %>
        </div>
        <div class="mb-3">
          <%= f.label :kilos_totales, "Kilos Totales", class: "form-label" %>
          <%= f.number_field :kilos_totales, step: "0.01", class: "form-control" %>
        </div>
        <div class="mb-3">
          <%= f.label :user_id, "Evaluador", class: "form-label" %>
          <p><strong><%= current_user.nombre_completo %></strong></p>
          <%= f.hidden_field :user_id, value: current_user.id %>
        </div>
        <div class="mb-3">
          <%= f.label :guia_despacho, "Imagen de Guía de Despacho", class: "form-label" %>
          <%= f.file_field :guia_despacho, class: "form-control" %>
        </div>
      </div>
    </div>

    <hr>

    <!-- Sección: Items de Recepción -->
    <h3>Items de Recepción</h3>
    <div id="reception-items-container">
      <!-- Primer ítem (se clona para agregar más) -->
      <div class="reception-item">
        <div class="row">
          <div class="col-md-3">
            <label class="form-label">Sector</label>
            <select name="reception[reception_items][][sector]" class="form-select sector-select">
              <option value="">Seleccione un sector</option>
              <% @sectors.each do |sector| %>
                <option value="<%= sector.nombre %>" data-sector-id="<%= sector.id %>"><%= sector.nombre %></option>
              <% end %>
            </select>
          </div>
          <div class="col-md-3">
            <label class="form-label">Variedad</label>
            <select name="reception[reception_items][][variety]" class="form-select variety-select" disabled>
              <option value="">Seleccione primero un sector</option>
            </select>
          </div>
          <div class="col-md-3">
            <label class="form-label">Color</label>
            <select name="reception[reception_items][][color]" class="form-select color-select" disabled>
              <option value="">Seleccione primero una variedad</option>
            </select>
          </div>
          <div class="col-md-3">
            <label class="form-label">Firmeza</label>
            <select name="reception[reception_items][][firmeza]" class="form-select">
              <option value="">Seleccione firmeza</option>
              <% Reception::FIRMEZA_OPCIONES.each do |opcion| %>
                <option value="<%= opcion %>"><%= opcion %></option>
              <% end %>
            </select>
          </div>
        </div>
        <div class="row mt-2">
          <div class="col-md-3">
            <label class="form-label">Calidad</label>
            <select name="reception[reception_items][][calidad]" class="form-select">
              <option value="">Seleccione calidad</option>
              <% Reception::CALIDAD_OPCIONES.each do |opcion| %>
                <option value="<%= opcion %>"><%= opcion %></option>
              <% end %>
            </select>
          </div>
          <div class="col-md-9 text-end">
            <button type="button" class="btn btn-danger remove-item-btn">Eliminar ítem</button>
          </div>
        </div>
        <hr>
      </div>
    </div>
    <div class="mb-3">
      <button type="button" id="add-item-btn" class="btn btn-secondary">Agregar ítem</button>
    </div>

    <div class="row mt-3">
      <div class="col-12">
        <%= f.submit "Crear Recepción", class: "btn btn-primary" %>
        <%= link_to 'Volver', receptions_path, class: 'btn btn-secondary ms-2' %>
      </div>
    </div>
  <% end %>
</div>

<script>
  // Se espera que @varieties_by_sector se haya preparado en el controlador.
  // La estructura debe ser: { sector_id: [ { id:, nombre:, colors: [array de colores] }, ... ], ... }
  window.varietiesBySector = <%= raw @varieties_by_sector.to_json %>;

  // Función para actualizar el select de variedades basado en el sector seleccionado.
  function updateVarietySelect(sectorSelect) {
    const itemDiv = sectorSelect.closest('.reception-item');
    const varietySelect = itemDiv.querySelector('.variety-select');
    const colorSelect = itemDiv.querySelector('.color-select');
    const selectedOption = sectorSelect.options[sectorSelect.selectedIndex];
    const sectorId = selectedOption ? selectedOption.getAttribute('data-sector-id') : null;
    
    varietySelect.innerHTML = '<option value="">Seleccione una variedad</option>';
    colorSelect.innerHTML = '<option value="">Seleccione una variedad primero</option>';
    colorSelect.disabled = true;
    
    if (!sectorId) {
      varietySelect.disabled = true;
      return;
    }
    
    let varieties = window.varietiesBySector[sectorId] || [];
    varieties.forEach(function(variety) {
      let option = document.createElement('option');
      option.value = variety.nombre;  // se guarda el nombre (dato fijo)
      option.textContent = variety.nombre;
      // Almacenar los colores (array) en un atributo data
      option.setAttribute('data-colors', JSON.stringify(variety.colors));
      varietySelect.appendChild(option);
    });
    varietySelect.disabled = false;
  }

  // Función para actualizar el select de colores basado en la variedad seleccionada.
  function updateColorSelect(varietySelect) {
    const itemDiv = varietySelect.closest('.reception-item');
    const colorSelect = itemDiv.querySelector('.color-select');
    colorSelect.innerHTML = '<option value="">Seleccione un color</option>';
    
    const selectedOption = varietySelect.options[varietySelect.selectedIndex];
    if (!selectedOption || !selectedOption.value) {
      colorSelect.disabled = true;
      return;
    }
    
    let colors = JSON.parse(selectedOption.getAttribute('data-colors') || '[]');
    colors.forEach(function(color) {
      let option = document.createElement('option');
      option.value = color;
      option.textContent = color;
      colorSelect.appendChild(option);
    });
    colorSelect.disabled = false;
  }

  // Uso de delegación para manejar el cambio en selects dinámicos
  document.addEventListener('change', function(e) {
    if (e.target.matches('.sector-select')) {
      updateVarietySelect(e.target);
    }
    if (e.target.matches('.variety-select')) {
      updateColorSelect(e.target);
    }
  });

  // Funcionalidad para agregar un nuevo ítem
  document.getElementById('add-item-btn').addEventListener('click', function() {
    const container = document.getElementById('reception-items-container');
    const originalItem = document.querySelector('.reception-item');
    const newItem = originalItem.cloneNode(true);
    
    // Reinicia los selects del ítem clonados
    newItem.querySelectorAll('select').forEach(function(select) {
      select.selectedIndex = 0;
      if (select.classList.contains('variety-select') || select.classList.contains('color-select')) {
        select.innerHTML = '<option value="">Seleccione...</option>';
        select.disabled = true;
      }
    });
    container.appendChild(newItem);
  });

  // Funcionalidad para eliminar un ítem
  document.addEventListener('click', function(e) {
    if(e.target.matches('.remove-item-btn')) {
      const itemDiv = e.target.closest('.reception-item');
      if(document.querySelectorAll('.reception-item').length > 1) {
        itemDiv.remove();
      } else {
        alert("Al menos debe existir un ítem.");
      }
    }
  });
</script>